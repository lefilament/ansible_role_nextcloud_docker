---

- name: Create nextcloud Docker structure on server in /home/docker/nextcloud
  ansible.builtin.file:
      name: "/home/docker/nextcloud"
      state: directory
      owner: root
      group: root
      mode: '0755'

## Install Nextcloud docker
- name: Install nextcloud docker
  ansible.builtin.template:
      src: nextcloud.yaml.j2
      dest: /home/docker/nextcloud/docker-compose.yaml
      owner: root
      group: root
      mode: '0400'
  notify:
      - Start nextcloud docker

- name: Add extra PHP configuration
  ansible.builtin.template:
      src: nextcloud-extra.ini.j2
      dest: /home/docker/nextcloud/nextcloud-extra.ini
      owner: root
      group: root
      mode: '0644'

- name: Add cron job for nextcloud cron.php
  ansible.builtin.cron:
      name: nextcloud cron.php
      minute: "*/15"
      job: /usr/bin/docker exec --user www-data nextcloud php cron.php

## Install Nextcloud backup docker
- name: Install nextcloud backup compose file
  ansible.builtin.template:
      src: backup.yaml.j2
      dest: /home/docker/backups/backup-nextcloud.yaml
      owner: root
      group: root
      mode: '0400'
  when: inventory_hostname in groups['maintenance_contract']

- name: Copy docker file for mysql duplicity
  ansible.builtin.copy:
      src: Dockerfile-backup
      dest: /home/docker/backups/Dockerfile-mysql
      owner: root
      group: root
      mode: '0644'
  when: inventory_hostname in groups['maintenance_contract']

- name: Add cron job to run backup every week
  ansible.builtin.cron:
      name: backup nextcloud
      minute: "00"
      hour: "00"
      weekday: "7"
      job: /usr/bin/docker-compose -f /home/docker/backups/backup-nextcloud.yaml run --rm backup_nextcloud
  when: inventory_hostname in groups['maintenance_contract']

# Flush handlers in order to start nextcloud if necessary
- name: Flush handlers
  ansible.builtin.meta: flush_handlers

# Set correct variables in configuration files
# TODO : replace by writing on nextcloud volume configuration file and restart nextcloud
- name: Set trusted domain 1
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" trusted_domains 1 --value="{{ cloud_url }}"

- name: Set trusted domain 2
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" trusted_domains 2 --value="nextcloud"

- name: Overwrite protocol
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" overwriteprotocol --value="https"

# Collaborative edition tools configuration
- name: Install OnlyOffice app
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "app:enable" onlyoffice
  when: cloud_onlyoffice
  tags: docker_cloudaborative

- name: Set OnlyOffice URL
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" onlyoffice DocumentServerUrl --value="https://{{ cloud_onlyoffice_url }}"
  when: cloud_onlyoffice
  tags: docker_cloudaborative

- name: Set internal OnlyOffice URL
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" onlyoffice DocumentServerInternalUrl --value="http://onlyoffice/"
  when: cloud_onlyoffice
  tags: docker_cloudaborative

- name: Set internal NextCloud URL
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" onlyoffice StorageUrl --value="http://nextcloud/"
  when: cloud_onlyoffice
  tags: docker_cloudaborative

- name: Set trusted domain to collabora for collaborative documents
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" trusted_domains 3 --value="{{ cloud_collabora_url }}"
  when: cloud_collabora
  tags: docker_cloudaborative

- name: Install Collabora app
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "app:enable" richdocuments
  when: cloud_collabora
  tags: docker_cloudaborative

- name: Set Collabora URL
  ansible.builtin.command: docker exec -u www-data nextcloud php occ --no-warnings "config:system:set" richdocuments wopi_url --value="https://{{ cloud_collabora_url }}"
  when: cloud_collabora
  tags: docker_cloudaborative
